// From https://github.com/kz04px/ataxx-engine
// MIT Licensed. See Tiktaxx-LICENSE.txt

#ifndef BITBOARDS_HPP_INCLUDED
#define BITBOARDS_HPP_INCLUDED

#include <cstdint>

#define U64_BOARD (0x1FFFFFFFFFFFF)

#define U64_FILE_A (0x40810204081)
#define U64_FILE_B (0x81020408102)
#define U64_FILE_C (0x102040810204)
#define U64_FILE_D (0x204081020408)
#define U64_FILE_E (0x408102040810)
#define U64_FILE_F (0x810204081020)
#define U64_FILE_G (0x1020408102040)

#define U64_NOT_FILE_A (0x1fbf7efdfbf7e)
#define U64_NOT_FILE_B (0x1f7efdfbf7efd)
#define U64_NOT_FILE_C (0x1efdfbf7efdfb)
#define U64_NOT_FILE_D (0x1dfbf7efdfbf7)
#define U64_NOT_FILE_E (0x1bf7efdfbf7ef)
#define U64_NOT_FILE_F (0x17efdfbf7efdf)
#define U64_NOT_FILE_G (0xfdfbf7efdfbf)

//const uint64_t single_jump[64] = {0ULL};
//const uint64_t double_jump[64] = {0ULL};
const uint64_t file[7] = {U64_FILE_A, U64_FILE_B, U64_FILE_C, U64_FILE_D, U64_FILE_E, U64_FILE_F, U64_FILE_G};
//const uint64_t rank[7] = {U64_RANK_1, U64_RANK_2, U64_RANK_3, U64_RANK_4, U64_RANK_5, U64_RANK_6, U64_RANK_7};

const uint64_t singles[49] = {0x182, 0x385, 0x70a, 0xe14, 0x1c28, 0x3850, 0x3020, 0xc103, 0x1c287, 0x3850e, 0x70a1c, 0xe1438, 0x1c2870, 0x181060, 0x608180, 0xe14380, 0x1c28700, 0x3850e00, 0x70a1c00, 0xe143800, 0xc083000, 0x3040c000, 0x70a1c000, 0xe1438000, 0x1c2870000, 0x3850e0000, 0x70a1c0000, 0x604180000, 0x1820600000, 0x3850e00000, 0x70a1c00000, 0xe143800000, 0x1c287000000, 0x3850e000000, 0x3020c000000, 0xc1030000000, 0x1c2870000000, 0x3850e0000000, 0x70a1c0000000, 0xe14380000000, 0x1c28700000000, 0x1810600000000, 0x81800000000, 0x143800000000, 0x287000000000, 0x50e000000000, 0xa1c000000000, 0x1438000000000, 0x830000000000};
const uint64_t doubles[49] = {0x1c204, 0x3c408, 0x7c891, 0xf9122, 0x1f2244, 0x1e0408, 0x1c0810, 0xe10204, 0x1e20408, 0x3e44891, 0x7c89122, 0xf912244, 0xf020408, 0xe040810, 0x70810207, 0xf102040f, 0x1f224489f, 0x3e448913e, 0x7c891227c, 0x781020478, 0x702040870, 0x3840810380, 0x7881020780, 0xf912244f80, 0x1f224489f00, 0x3e448913e00, 0x3c081023c00, 0x38102043800, 0x1c204081c000, 0x3c408103c000, 0x7c891227c000, 0xf912244f8000, 0x1f224489f0000, 0x1e040811e0000, 0x1c081021c0000, 0x102040e00000, 0x204081e00000, 0x448913e00000, 0x891227c00000, 0x112244f800000, 0x20408f000000, 0x40810e000000, 0x102070000000, 0x2040f0000000, 0x4489f0000000, 0x8913e0000000, 0x11227c0000000, 0x204780000000, 0x408700000000};

inline uint64_t single_jump_sq(const int sq)
{
    return singles[sq];
}

inline uint64_t double_jump_sq(const int sq)
{
    return doubles[sq];
}

uint64_t single_jump_bb(const uint64_t bb);
uint64_t double_jump_bb(const uint64_t bb);

#endif
